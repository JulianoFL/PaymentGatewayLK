using paymenu.Shared.Models;
using paymenu.Shared.Models.Payment;
using paymenu.Shared.Models.Utilities.JsonSupport;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace paymenu.Shared.Services
{
    public abstract class HttpCalls
    {
        private static readonly HttpClient HClient = new HttpClient();


        public int RequestTimeout { private set; get; } = 30000;



        public async Task<T> GetAsync<T>(string URLQueryString, string AuthorizationToken = null)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

            int Attempt = 0;
            int Retries = 3;

            
            while (true)
            {

                HttpWebRequest Request = (HttpWebRequest)WebRequest.Create(URLQueryString);
                Request.Timeout = RequestTimeout;
                Request.Proxy = null;

                if (URLQueryString.Contains("api.pagar.me"))
                    Request.Headers.Add("X-PagarMe-Version", "2017-08-28");

                if (AuthorizationToken != null && AuthorizationToken != "")
                    Request.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + AuthorizationToken);

                try
                {
                    HttpWebResponse Response = (HttpWebResponse)(await Request.GetResponseAsync());
                    
                    string Charset = Response.CharacterSet;
                    
                    Encoding Encode = Encoding.UTF8;
                    if (!string.IsNullOrEmpty(Charset))
                        Encode = Encoding.GetEncoding(Charset);

                    using (Stream ResponseStream = Response.GetResponseStream())
                    {
                        StreamReader Reader = new StreamReader(ResponseStream, Encode);

                        string JsonString = await Reader.ReadToEndAsync();
                        
                        T JObj = SnakeCaseJsonObject.DeserializeObject<T>(JsonString);
                                               
                        return JObj;
                    }
                }
                catch (WebException WebError)
                {
                    if (WebError.Status != WebExceptionStatus.Timeout || Attempt > Retries)
                    {
                        throw WebError;
                    }

                    Attempt++;
                }
                catch (Exception Error)
                {
                    if (Attempt > Retries)
                        throw Error;
                }

                Attempt++;
            }
        }

        public async Task<T> PostAsync<T>(string URL, object PostBody, string AuthorizationToken = null, Dictionary<string, string> Headers = null)
        {
            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;


            int Attempt = 0;
            int Retries = 3;
            
            while (true)
            {
                HttpWebRequest Request = (HttpWebRequest)WebRequest.Create(URL);
                Request.Timeout = RequestTimeout;
                Request.Method = "POST";
                Request.ContentType = "application/json";

                if (AuthorizationToken != null && AuthorizationToken != "")
                    Request.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + AuthorizationToken);

                if (URL.Contains("api.pagar.me"))
                    Request.Headers.Add("X-PagarMe-Version", "2019-09-01");

                if (Headers != null)
                    foreach (var item in Headers)
                        Request.Headers.Add(item.Key, item.Value);


                string JsonBody = "";
                if (PostBody != null)
                {
                    JsonBody = SnakeCaseJsonObject.SerializeObject(PostBody);

                    byte[] JsonBytes = Encoding.UTF8.GetBytes(JsonBody);

                    Request.ContentLength = JsonBytes.Length;

                    (await Request.GetRequestStreamAsync()).Write(JsonBytes, 0, JsonBytes.Length);
                }


                try
                {
                    HClient.DefaultRequestHeaders.Add

                    var response = await HClient.PostAsync("http://www.example.com/recepticle.aspx", content);

                    HttpWebResponse Response = (HttpWebResponse)(await Request.GetResponseAsync());

                    string Charset = Response.CharacterSet;

                    Encoding Encode = Encoding.UTF8;
                    if (!string.IsNullOrEmpty(Charset))
                        Encode = Encoding.GetEncoding(Charset);

                    using (Stream ResponseStream = Response.GetResponseStream())
                    {
                        StreamReader Reader = new StreamReader(ResponseStream, Encode);

                        string JsonString = await Reader.ReadToEndAsync();
                        
                        T JObj = SnakeCaseJsonObject.DeserializeObject<T>(JsonString);
                        
                        return JObj;
                    }
                }
                catch (WebException WebError)
                {
                    if (WebError.Status != WebExceptionStatus.Timeout || Attempt > Retries)
                    {
                        throw WebError;
                    }

                    Attempt++;
                }
                catch (Exception Error)
                {
                    if (Attempt > Retries)
                        throw Error;
                }

                Attempt++;
            }
        }

        public async Task<T> PutAsync<T>(string URL, object PostBody = null, string AuthorizationToken = null)
        {
            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;


            int Attempt = 0;
            int Retries = 3;

            while (true)
            {
                HttpWebRequest Request = (HttpWebRequest)WebRequest.Create(URL);
                Request.Timeout = RequestTimeout;
                Request.Method = "PUT";
                Request.ContentType = "application/json";

                if (!string.IsNullOrEmpty(AuthorizationToken))
                    Request.Headers.Add(HttpRequestHeader.Authorization, AuthorizationToken);
                

                if(URL.Contains("api.pagar.me"))
                    Request.Headers.Add("X-PagarMe-Version", "2019-09-01");


                if (PostBody != null)
                {
                    string JsonBody = SnakeCaseJsonObject.SerializeObject(PostBody);

                    byte[] JsonBytes = Encoding.UTF8.GetBytes(JsonBody);

                    Request.ContentLength = JsonBytes.Length;

                    (await Request.GetRequestStreamAsync()).Write(JsonBytes, 0, JsonBytes.Length);
                }


                try
                {
                    HttpWebResponse Response = (HttpWebResponse)(await Request.GetResponseAsync());

                    string Charset = Response.CharacterSet;

                    Encoding Encode = Encoding.UTF8;
                    if (!string.IsNullOrEmpty(Charset))
                        Encode = Encoding.GetEncoding(Charset);

                    using (Stream ResponseStream = Response.GetResponseStream())
                    {
                        StreamReader Reader = new StreamReader(ResponseStream, Encode);

                        string JsonString = await Reader.ReadToEndAsync();

                        T JObj = SnakeCaseJsonObject.DeserializeObject<T>(JsonString);

                        return JObj;
                    }
                }
                catch (WebException WebError)
                {
                    if (WebError.Status != WebExceptionStatus.Timeout || Attempt > Retries)
                    {
                        throw WebError;
                    }

                    Attempt++;
                }
                catch (Exception Error)
                {
                    if (Attempt > Retries)
                        throw Error;
                }

                Attempt++;
            }
        }


        public static bool IsValidJson<T>(string Json)
        {
            try
            {
                if (string.IsNullOrEmpty(Json))
                    return false;


                SnakeCaseJsonObject.DeserializeObject<T>(Json);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
}
